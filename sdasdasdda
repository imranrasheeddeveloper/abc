//
//  ContentView.swift
//  Componetns
//
//  Created by apple on 8/7/23.
//

import SwiftUI


struct SnackbarModel {
    enum Variant {
        case base, error, warn, info, success
    }
    
    let variant: Variant
    let leadingIcon: Image
    let title: String
    let description: String
    let actionText: String?
    let action: (() -> Void)?
}

struct SnackbarView: View {
    let model: SnackbarModel
    
    private var backgroundColor: Color {
        switch model.variant {
            case .base: return Color.gray.opacity(0.2)
            case .error: return Color.red.opacity(0.8)
            case .warn: return Color.yellow.opacity(0.8)
            case .info: return Color.blue.opacity(0.8)
            case .success: return Color.green.opacity(0.8)
        }
    }
    
    var body: some View {
        HStack {
            model.leadingIcon
                .font(.system(size: 24))
                .padding(.trailing, 8)
            
            VStack(alignment: .leading, spacing: 4) {
                Text(model.title)
                    .font(.headline)
                    .lineLimit(1)
                Text(model.description)
                    .font(.subheadline)
                    .lineLimit(2)
            }
            .layoutPriority(1)
            
            Spacer()
            
            if let actionText = model.actionText {
               
                    Text(actionText)
                        .font(.subheadline)
                        .foregroundColor(.black)
                        .padding(.horizontal, 12)
                        .padding(.vertical, 6)
                        .cornerRadius(4)
                
            }
            
            Button(action: {
                model.action?()
            }) {
                Image(systemName: "xmark.circle.fill")
                    .font(.system(size: 24))
                    .foregroundColor(.white)
            }
        }
        .padding()
        .frame(width: 397, height: 68)
        .background(
            RoundedRectangle(cornerRadius: 8)
                .fill(backgroundColor)
        )
    }
}




struct SnackbarViewWrapper: View {
    @Binding var isPresented: Bool
    let model: SnackbarModel
    
    var body: some View {
        if isPresented {
            SnackbarView(model: model)
                .onTapGesture {
                    withAnimation {
                        isPresented = false
                    }
                }
        }
    }
}


extension View {
    func snackbar(isPresented: Binding<Bool>, model: Binding<SnackbarModel?>) -> some View {
        self.modifier(SnackbarModifier(isPresented: isPresented, model: model))
    }
}

struct SnackbarModifier: ViewModifier {
    @Binding var isPresented: Bool
    @Binding var model: SnackbarModel?
    
    func body(content: Content) -> some View {
        content
            .overlay(
                Group {
                    if let model = model {
                        VStack {
                            Spacer()
                            SnackbarViewWrapper(isPresented: $isPresented, model: model)
                                .transition(.move(edge: .bottom))
                                .animation(.easeInOut(duration: 0.3))
                        }
                        .edgesIgnoringSafeArea(.bottom)
                    }
                }
            )
    }
}

struct ContentView: View {
    @State private var snackbarIsVisible = false
    @State private var snackbarModel: SnackbarModel? = nil
    
    var body: some View {
        VStack {
            Button("Show Snackbar") {
                let model = SnackbarModel(
                    variant: .warn,
                    leadingIcon: Image(systemName: "exclamationmark.triangle.fill"),
                    title: "Warning",
                    description: "This is a warning message.",
                    actionText: "OK",
                    action: {
                        // Handle action
                    }
                )
                // Display Snackbar
                snackbarModel = model
                snackbarIsVisible = true
                
                // Automatically dismiss after a delay (e.g., 3 seconds)
                DispatchQueue.main.asyncAfter(deadline: .now() + 3) {
                    snackbarIsVisible = false
                }
            }
            .padding()
        }
        .snackbar(isPresented: $snackbarIsVisible, model: $snackbarModel)
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
