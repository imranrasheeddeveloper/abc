import SwiftUI

enum ButtonVariant {
    case primary
    case secondary
    case tertiary
}

enum ButtonState {
    case enabled
    case disabled
    case pressed
}

struct IconButtonStyle: ButtonStyle {
    var variant: ButtonVariant
    var state: ButtonState
    @Environment(\.colorScheme) private var colorScheme

    func makeBody(configuration: Configuration) -> some View {
        let isPressed = configuration.isPressed
        let isEnabled = state == .enabled
        let isDisabled = state == .disabled

        return HStack(spacing: 10) {
            configuration.label
            Image(systemName: "star.fill")
        }
        .padding()
        .frame(minWidth: 44, minHeight: 44) // Set a minimum size for the button
        .background(getButtonBackgroundColor())
        .cornerRadius(22) // Use half of the button's height to create a fully rounded shape
        .opacity(isDisabled ? 0.5 : 1.0)
        .scaleEffect(isPressed ? 0.9 : 1.0)
        .animation(.spring())
        .contentShape(Circle()) // Make the entire button area tappable with a circular shape
        .disabled(isDisabled)
    }

    private func getButtonBackgroundColor() -> Color {
       
    }
}
